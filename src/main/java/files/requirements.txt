SPRINT #6

The software shall:

DONE * Logging with (based on) threading is required

DONE * Select-Copy-paste (versus select-move-and-paste)

DONE * indication of which tool is in use

DONE * invent a feature (please include, as a separate upload a text file with obvious name - myfeature.txt - that has a description)

DONE * Javadoc the whole (see the style guide, it should still be tight/concise not comments like "this is a comment about.." please!)

DONE * Describe (again, separate upload/text file - like "mytechnicaldebt.txt") something you have refactored/fixed/polished/improved on this sprint.  

DONE * Some Extra credit: implement your new feature.

Some more: a second one.

Help should be updated, as should tool tips.

If you've already done something extra previous to this you think is good, include "myearlierextra.txt" with a description, too!)
----------------------------------------------------------------------------------------------------------------------------------------------------------
SPRINT #5

The software shall:

BUGGY * have at least 3 unit tests.  (More info coming in class...)

DONE * have a timer that allows for "autosave" [every X seconds, it saves a temporary copy - it should NOT overwrite the existing file if any]; ideally this should be threaded.  This timer should be visible/invisible to the user at their option.  X should be something that can be set by the user.  If changed, it should persist on the next use of the software on that machine.]  

DONE * have some JavaDoc commenting.  (More info on this coming, also)

DONE * have icons for tools

DONE * have updated help

DONE * have mouseover help for controls (if a icons+text as the tool, a short explanation is sufficient - if icons only were used, just a text name is sufficient)

you should start but it isn't required for this sprint (so, 2 weeks)...

the software shall 

* have a logging capability that records, in a text file, when saving happens and when the active tool is changed
----------------------------------------------------------------------------------------------------------------------------------------------------------
SPRINT #4

The software shall:

BUGGY * have an Undo/Redo using an abstract data type ("stack" preferred/recommended); you should not use the FX built in tool!

DONE * provide Blank / starter image (a tab or the tool should not have just a grey tab...)

DONE * have an additional shape of your choice

DONE * have an eraser tool 

BUGGY * be able to draw a "regular" (same side length) polygon with the user specifying the # of sides.

LESS CHALLENGING AFTER UNDO/REDO * Live draw / interactive draw (you should "see" the line or shape as you draw it)

DONE * [The Big One] Select a piece of the image and move it.  
----------------------------------------------------------------------------------------------------------------------------------------------------------
SPRINT #3

DONE ~ * A pencil tool (freehand drawing of a line) in addition to drawing a straight line  (OR, if you have this, the "straight line" tool)
DONE ~ * Width and color selection should work for both pencil and line tools.
DONE * Draw a square, a rectangle, an ellipse, and a circle, with fill    (don't forget color for inside and the edge of the shape).
DONE ~ * "Smart" save ("you've made changes...")
DONE ~ * Multiple image file types (open and save) - at least 3.
DONE * Keyboard UI controls (control S/Save, alt F/File menu, etc)
DONE ~ * A text label describing the color.
DONE * Color "grabber"/dropper tool.
DONE * Resize canvas (and resulting image) and zoom in/out.

DONE * Tabs
DONE * Sorry: forgot one: Text tool

That's 90+ stuff. 

Reach goal, optional for 90+ NOT required but cool/good add:
* Transparency handling if applicable.  

Worthwhile? extra credit for this if you can do it without data loss risks (as in, saving from a transparent to no-transparency format)

FUTURE REQUIREMENTS:
* Undo using a stack (not the built in library for images, but rather the general abstract/data type)